Харківський Національний Університет Радіоелектроніки

            Кафедра Програмної Інженерії




                Практичне завдання №1
  Основні рекомендації написання коду для JavaScript




                           Виконала: студентка групи ПЗПІ-22-3

                                     Таранова Аліна Андріївна



                              Прийняв: Сокорчук Ігор Петрович




                     Харків 2024
Мета роботи:
Ознайомити студентів з основними рекомендаціями щодо написання чистого,
ефективного та підтримуваного коду для різних мов програмування, а також
навчити аналізувати та рефакторити код для покращення його якості.
Завдання:
Студент повинен обрати мову програмування, дослідити основні
рекомендації для написання якісного коду у цій мові, продемонструвати ці
рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати
детальні пояснення. Для кожного прикладу мають бути наведені фрагменти
коду.
Відео докладу по силці: https://youtu.be/SjpCkLSmZuc
Опис основних рекомендацій для написання коду:
Стильові рекомендації:
       Консистентний стиль:
           o   Використовуйте відступи (2 або 4 пробіли).
           o   Одинарні ' або подвійні " лапки по всьому проєкту.
       Приклад коду:
// Погано
function calculateTax(income){ return income * 0.15 }
// Добре
function calculateTax(income) {
    return income * 0.15;
}
Іменування змінних, функцій і класів:
       CamelCase для змінних: totalSum, userName.
       PascalCase для класів: User, OrderManager.
       Уникайте скорочень і неочевидних імен.
       Приклад:
// Погано
let x = 42;
// Добре
let userAge = 42;
Коментування коду:
       Додавайте коментарі для складних фрагментів:
// Розрахунок податку з доходу
function calculateTax(income) {
    const taxRate = 0.15; // Ставка податку 15%
    return income * taxRate;
}
       Уникайте очевидних коментарів:
        Не пишіть: // Змінна age зберігає вік користувача.
Форматування коду:
       Відступи для вкладеності.
       Дотримуйтесь логічного поділу:
if (user.isAdmin) {
    grantAccess();
} else {
    denyAccess();
}
Сучасні функції JavaScript:
       Використовуйте const і let замість var.
       Шаблонні рядки для формування тексту:
console.log(`User ${userName} is ${userAge} years old.`);
       Стрілкові функції для короткого синтаксису:
const add = (a, b) => a + b;
Принципи чистого коду (DRY):
       Уникайте дублювання коду (DRY — Don’t Repeat Yourself).
       Приклад:
// Погано
function calculateArea(width, height) {
    return width * height;
}
function calculateVolume(width, height, depth) {
    return width * height * depth;
}
// Добре
function calculate(...dimensions) {
    return dimensions.reduce((result, dimension) => result * dimension, 1);
}
Обробка помилок:
            Завжди використовуйте блоки try...catch для критичних операцій.
            Приклад:
try {
    const data = JSON.parse(jsonString);
} catch (error) {
    console.error("Invalid JSON string:", error);
}
Оптимізація продуктивності:
            Уникайте зайвих обчислень:
// Погано
for (let i = 0; i < array.length; i++) {
    // ...
}
// Добре
const length = array.length;
for (let i = 0; i < length; i++) {
    // ...
}
         Використовуйте сучасні методи для роботи з масивами (map, reduce,
          filter).
Тестування коду:
         Пишіть модульні тести з Jest або Mocha.
         Приклад простого тесту:
test('adds 1 + 2 to equal 3', () => {
    expect(add(1, 2)).toBe(3);
});




Висновки:
Дотримання правил написання коду робить проєкти зрозумілими та зручними
для підтримки. Зрозумілий код економить час і зусилля при роботі в команді
та під час подальшого доопрацювання. Код із чітко визначеними функціями
та змінними легше тестувати та підтримувати. Використання цих
рекомендацій зробить ваш код не тільки "працюючим", але й "якісним".
    Додаток А
Слайди презентації
